/*

Find the nth term in Count and Say Sequence. The count-and-say sequence is the sequence of the below integers: 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, â€¦

The nth term of the series is generated by reading (n-1)â€™th term.

The first term is "1".

The second term is "11", generated by reading the first term as "One 1" (There is one 1 in the previous term)

The third term is "21", generated by reading the second term as "Two 1"

The fourth term is "1211", generated by reading the third term as "One 2 One 1"

and so on

--------------------------------------------

input format:
The only line contains a single integers N.

--------------------------------------------

output format:
Return a string depicting the nth term of the series.

--------------------------------------------

input:
3

--------------------------------------------

output:
21

--------------------------------------------

explained:
The third term of series is 21.

--------------------------------------------

constraints:
1 <= n <= 30

*/

package Gym.Easy;

import java.util.*;

public class Count_And_Say {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        try {
            int n = sc.nextInt();
            System.out.println(countandsay(n - 2, new StringBuilder("1")));
        } catch (Exception e) {
            System.out.println("\nError Occured -\n");
            e.printStackTrace();
        } finally {
            System.out.println("\n------------------------\n Exiting the program... \n------------------------\n");
        }
    }

    public static StringBuilder countandsay(int n, StringBuilder s) {
        if (n < 0) {
            return s;
        }
        return countandsay(n - 1, counter(s.toString().split("")));
    }

    public static StringBuilder counter(String[] str) {
        int count = 1;
        StringBuilder s = new StringBuilder();
        int i;
        for (i = 0; i < str.length; i++)
            if (i != 0)
                if (str[i].equals(str[i - 1]))
                    count += 1;
                else {
                    s.append(count + str[i - 1]);
                    count = 1;
                }
        if (count != 0)
            s.append(count + str[i - 1]);
        return s;
    }

    // public static String counter(String[] str, int count, int index, String s) {
    // if (index > str.length - 1) {
    // return s += (count > 0 ? count + str[index - 1] : "");
    // }
    // return index == 0 ? counter(str, count, index += 1, s)
    // : str[index].equals(str[index - 1]) ? counter(str, count += 1, index += 1, s)
    // : counter(str, 1, index + 1, s += (count + str[index - 1]));
    // }
}